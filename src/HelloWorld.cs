using System.Diagnostics.CodeAnalysis;
using AElf.Sdk.CSharp;
using Google.Protobuf.WellKnownTypes;
using System.Collections.Generic;
using AElf.Standards.ACS6;

namespace AElf.Contracts.HelloWorld
{
    // Contract class must inherit the class generated by the proto file
    public class HelloWorld : HelloWorldContainer.HelloWorldBase
    {
        // Method to update the message value. 
        public override Empty Update(StringValue input)
        {
            // Set the message value in the contract state
            State.Message.Value = input.Value;
            // Emit an event to notify listeners about the something happened during the execution of this method
            Context.Fire(new UpdatedMessage
            {
                Value = input.Value
            });
            // Return an empty response
            return new Empty();
        }

        // Method to read the current message value
        public override StringValue Read(Empty input)
        {
            // Retrieve the value from the state
            var value = State.Message.Value;
            // Return value retrieved
            return new StringValue
            {
                Value = value
            };
        }

        public override Empty CreateRandomCharacter(Empty input)
        {
            State.ConsensusContract.Value =
                    Context.GetContractAddressByName(SmartContractConstants.ConsensusContractSystemName);
            var currentHeight = Context.CurrentHeight;
            var randomHash = State.ConsensusContract.GetRandomHash.Call(new Int64Value
            {
                Value = currentHeight
            });
            var attributes = new List<int>();
            for (int i = 0; i < 3; i++)
            {
            var startIndex = i * 8;
            var intValue = int.Parse(randomHash.ToHex().Substring(startIndex, 8), System.Globalization.NumberStyles.HexNumber);
            var attribute = (intValue % 6 + 5) % 6 + 1;
            attributes.Add(attribute);
            }
            var sum = attributes[0] + attributes[1] + attributes[2];
            var health = 30 * attributes[0] / sum;
            var strength = 30 * attributes[1] / sum;
            var speed = 30 * attributes[2] / sum;
            var character = new StringValue();
            character.Value = $"Here is your character, HP is {health}, strength is {strength}, speed is {speed}";
            State.Character.Value = character.Value;
            return new Empty();
        }

        public override StringValue GetRandomCharacter(Empty input)
        {
            var value = State.Character.Value;
            // Return value retrieved
            return new StringValue
            {
                Value = value
            };
        }
    }
    
}